Please follow these guidelines when writing code for Mono.Upnp in order to maintain a consistant and clean codebase.

C# Coding Style Guidelines
==========================

This style guide is based on the Mono Project coding guidelines [1]. All public APIs must conform to the Framework 
Design Guidelines [2]. If you use MonoDevelop, the solution file will specify the proper code formatting rules.

  1. Lines are indented with four spaces. DO NOT use tabs in C# source files.

  2. Put a space before parenthesis IN ALL CASES, like so:

       this.ToString ();

  2. Namespaces, classes, structs, and methods must have their opening brace on a new line, like so:
  
       namespace Foo
       {
           class Bar
           {
               public void Bat ()
               {
               }
           }
       }

  3. Statement blocks (if, else, try, catch, &c.) must ALWAYS have an opeing brace on the same line, followed by the
     first statement expression on its own line, and ending with a closing brace on its own line, like so:

       if (foo != null) {
           foo.Bar ();
       }

     One exception is: else, else-if, catch, and do-while statements should begin on the same line as the preceding 
     statement's closing brace, like so:

       if (foo != null) {
           foo.Bar();
       } else {
           ...
       }

     NEVER omit the braces from statement blocks, event if they contain only one expression.
  
  4. Properties look like this:

       public string Foo { get; set; }  // Automatic property
       
       public string Bar {              // 1-line accessor
           get { return "bar"; }
       }
       
       public string Bat {              // Multi-line accessor
           get {
               if (bat == null) {
                   bat = BuildBat ();
               }
               return bat;
           }
      }

  5. Lines should not exceed 120 columns. Overlong method and constructor definitions should break for EACH parameter
     and indent to the opening parenthesis, like so:

       public void Foo (string parameter1,
                        string parameter2,
                        string parameter3)
       {
       }

     Overlong expressions should break at a logical location and indent 4 spaces, like so:

       throw new InvalidOperationExceltion (string.Format (
           "There is no action named {0} and the device {1}", actionName, deviceName));

     Overlong expressions in a statement declaration should break logically and indent four spaces. In these cases, 
     the statement opening brace gets its own line, like so:

       if (parameter1 == null ||
           parameter2 == null ||
           parameter3 == null)
       {
           ...
       }

  6. Use the var keyword and array type-inference when possible.

  7. Use NEITHER the "private" visibility modifier on members, NOR the "internal" visibility modifier on types; those
     are the default visibility levels.

  8. Private variable and field identifiers should be all lower-cased and underscored, like so:

       xml_serializer_factory

     Parameter identifiers should use begin lower-case and capitalize each following word (Pascal casing), like so:

       xmlSerializerFactory
     
     All other identifiers (types, methods, properties, events, non-private fileds) should be camel-cased, like so:

       XmlSerializerFactory

     Under NO CIRCUMSTANCE should you capitalize all letters in an identifier.

[1] http://www.mono-project.com/Coding_Guidelines
[2] Highly recommended reading: http://www.amazon.com/gp/product/0321246756/ or view at:
    http://msdn2.microsoft.com/en-us/library/ms229042.aspx